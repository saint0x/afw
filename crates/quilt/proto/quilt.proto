syntax = "proto3";

package quilt;

// The main service for managing containers
service QuiltService {
    // Creates a new container with advanced features
    rpc CreateContainer (CreateContainerRequest) returns (CreateContainerResponse);
    // Starts a created container
    rpc StartContainer (StartContainerRequest) returns (StartContainerResponse);
    // Gets the status of a container
    rpc GetContainerStatus (GetContainerStatusRequest) returns (GetContainerStatusResponse);
    // Gets the logs of a container
    rpc GetContainerLogs (GetContainerLogsRequest) returns (GetContainerLogsResponse);
    // Stops a running container
    rpc StopContainer (StopContainerRequest) returns (StopContainerResponse);
    // Removes a container
    rpc RemoveContainer (RemoveContainerRequest) returns (RemoveContainerResponse);
    // Executes a command in a running container (synchronous)
    rpc ExecContainer (ExecContainerRequest) returns (ExecContainerResponse);
    // Executes a command in a running container (asynchronous - returns immediately with task ID)
    rpc ExecContainerAsync (ExecContainerAsyncRequest) returns (ExecContainerAsyncResponse);
    // Gets the status of an async task
    rpc GetTaskStatus (GetTaskStatusRequest) returns (GetTaskStatusResponse);
    // Gets the result of a completed async task
    rpc GetTaskResult (GetTaskResultRequest) returns (GetTaskResultResponse);
    // Lists all tasks for a container
    rpc ListTasks (ListTasksRequest) returns (ListTasksResponse);
    // Cancels a running async task
    rpc CancelTask (CancelTaskRequest) returns (CancelTaskResponse);
    // Lists all active containers
    rpc ListContainers (ListContainersRequest) returns (ListContainersResponse);
    // Gets system-level metrics from the host
    rpc GetSystemMetrics (GetSystemMetricsRequest) returns (GetSystemMetricsResponse);
    // Gets the network topology of all managed containers
    rpc GetNetworkTopology (GetNetworkTopologyRequest) returns (GetNetworkTopologyResponse);
    // Gets detailed network information for a specific container
    rpc GetContainerNetworkInfo (GetContainerNetworkInfoRequest) returns (GetContainerNetworkInfoResponse);
    
    // Bundle management operations
    // Uploads an .aria bundle to the package store (streaming for large files)
    rpc UploadBundle (stream UploadBundleRequest) returns (UploadBundleResponse);
    // Gets information about a specific bundle
    rpc GetBundleInfo (GetBundleInfoRequest) returns (GetBundleInfoResponse);
    // Lists all stored bundles with optional filtering
    rpc ListBundles (ListBundlesRequest) returns (ListBundlesResponse);
    // Deletes a bundle from storage
    rpc DeleteBundle (DeleteBundleRequest) returns (DeleteBundleResponse);
    // Validates a bundle without storing it
    rpc ValidateBundle (ValidateBundleRequest) returns (ValidateBundleResponse);
}

// Container status enumeration
enum ContainerStatus {
    UNSPECIFIED = 0; // Default value, indicates no filter
    PENDING = 1;   // Container created but not started
    RUNNING = 2;   // Container is actively running
    EXITED = 3;    // Container finished execution
    FAILED = 4;    // Container failed to start or execute
}

// Task status enumeration for async operations
enum TaskStatus {
    TASK_UNSPECIFIED = 0;   // Default value
    TASK_PENDING = 1;       // Task queued but not started
    TASK_RUNNING = 2;       // Task is currently executing
    TASK_COMPLETED = 3;     // Task completed successfully
    TASK_FAILED = 4;        // Task failed with error
    TASK_CANCELLED = 5;     // Task was cancelled
    TASK_TIMEOUT = 6;       // Task exceeded timeout limit
}

// Bundle status enumeration
enum BundleStatus {
    BUNDLE_UNSPECIFIED = 0;    // Default value, indicates no filter
    BUNDLE_UPLOADING = 1;      // Bundle is being uploaded
    BUNDLE_VALIDATING = 2;     // Bundle is being validated
    BUNDLE_STORED = 3;         // Bundle is successfully stored
    BUNDLE_DEPLOYED = 4;       // Bundle is deployed and available
    BUNDLE_FAILED = 5;         // Bundle upload or validation failed
    BUNDLE_CORRUPTED = 6;      // Bundle failed integrity checks
}

message CreateContainerRequest {
    // Basic container configuration
    string image_path = 1;                          // Path to container image tarball
    repeated string command = 2;                    // Command to execute in container
    map<string, string> environment = 3;           // Environment variables
    string working_directory = 4;                  // Working directory inside container
    
    // Setup commands for dynamic runtime installation
    repeated string setup_commands = 5;            // Setup commands (e.g., "npm: typescript", "pip: requests")
    
    // Resource limits
    int32 memory_limit_mb = 6;                     // Memory limit in megabytes (0 = default)
    float cpu_limit_percent = 7;                   // CPU limit as percentage (0.0 = default)
    
    // Namespace configuration
    bool enable_pid_namespace = 8;                 // Enable PID namespace isolation
    bool enable_mount_namespace = 9;               // Enable mount namespace isolation
    bool enable_uts_namespace = 10;                // Enable UTS namespace isolation (hostname)
    bool enable_ipc_namespace = 11;                // Enable IPC namespace isolation
    bool enable_network_namespace = 12;            // Enable network namespace isolation
    
    // Lifecycle control
    bool auto_start = 13;                          // Whether to automatically start the container (default: false for agent control)
}

message CreateContainerResponse {
    string container_id = 1;                       // Generated container ID
    bool success = 2;                              // Whether creation was successful
    string error_message = 3;                      // Error message if creation failed
}

message StartContainerRequest {
    string container_id = 1;                       // Container ID to start
}

message StartContainerResponse {
    bool success = 1;                              // Whether start was successful
    string error_message = 2;                      // Error message if start failed
}

message GetContainerStatusRequest {
    string container_id = 1;                       // Container ID to query
}

message GetContainerStatusResponse {
    string container_id = 1;                       // Container ID
    ContainerStatus status = 2;                    // Current container status
    int32 exit_code = 3;                          // Exit code (if exited)
    string error_message = 4;                      // Error message (if failed)
    int32 pid = 5;                                // Process ID (if running)
    uint64 created_at = 6;                        // Creation timestamp
    uint64 memory_usage_bytes = 7;                // Current memory usage
    string rootfs_path = 8;                       // Container rootfs path
    string ip_address = 9;                        // Container IP address (ICC networking)
}

message LogEntry {
    uint64 timestamp = 1;                         // Timestamp of log entry
    string message = 2;                           // Log message content
}

message GetContainerLogsRequest {
    string container_id = 1;                      // Container ID to get logs for
}

message GetContainerLogsResponse {
    string container_id = 1;                      // Container ID
    repeated LogEntry logs = 2;                   // All log entries
}

message StopContainerRequest {
    string container_id = 1;                      // Container ID to stop
    int32 timeout_seconds = 2;                    // Timeout before force kill (optional)
}

message StopContainerResponse {
    bool success = 1;                             // Whether stop was successful
    string error_message = 2;                     // Error message if stop failed
}

message RemoveContainerRequest {
    string container_id = 1;                      // Container ID to remove
    bool force = 2;                               // Force removal even if running
}

message RemoveContainerResponse {
    bool success = 1;                             // Whether removal was successful
    string error_message = 2;                     // Error message if removal failed
}

message ExecContainerRequest {
    string container_id = 1;                      // Container ID to execute command in
    repeated string command = 2;                  // Command and arguments to execute
    string working_directory = 3;                 // Working directory (optional)
    map<string, string> environment = 4;          // Additional environment variables
    bool capture_output = 5;                      // Whether to capture and return output
}

message ExecContainerResponse {
    bool success = 1;                             // Whether execution was successful
    int32 exit_code = 2;                         // Exit code of the executed command
    string stdout = 3;                            // Standard output (if capture_output=true)
    string stderr = 4;                            // Standard error (if capture_output=true)
    string error_message = 5;                     // Error message if execution failed
}

message ExecContainerAsyncRequest {
    string container_id = 1;                      // Container ID to execute command in
    repeated string command = 2;                  // Command and arguments to execute
    string working_directory = 3;                 // Working directory (optional)
    map<string, string> environment = 4;          // Additional environment variables
    bool capture_output = 5;                      // Whether to capture and return output
    int32 timeout_seconds = 6;                    // Optional timeout (0 = no timeout)
}

message ExecContainerAsyncResponse {
    bool success = 1;                             // Whether task was successfully queued
    string task_id = 2;                           // ID of the asynchronous task
    string error_message = 3;                     // Error message if queuing failed
}

message GetTaskStatusRequest {
    string task_id = 1;                           // ID of the task to query
}

message GetTaskStatusResponse {
    string task_id = 1;                           // ID of the task
    TaskStatus status = 2;                        // Current status of the task
    uint64 started_at = 3;                        // When the task started (unix timestamp)
    uint64 completed_at = 4;                      // When the task completed (unix timestamp, 0 if not completed)
    int32 exit_code = 5;                         // Exit code (if completed)
    string error_message = 6;                     // Error message (if failed)
    double progress_percent = 7;                  // Optional progress indicator (0.0-100.0)
    string current_operation = 8;                 // Description of current operation
}

message GetTaskResultRequest {
    string task_id = 1;                           // ID of the task to get result for
}

message GetTaskResultResponse {
    string task_id = 1;                           // ID of the task
    TaskStatus status = 2;                        // Final status of the task
    bool success = 3;                             // Whether the task completed successfully
    int32 exit_code = 4;                         // Exit code of the executed command
    string stdout = 5;                            // Standard output (if capture_output=true)
    string stderr = 6;                            // Standard error (if capture_output=true)
    string error_message = 7;                     // Error message (if failed)
    uint64 started_at = 8;                        // When the task started (unix timestamp)
    uint64 completed_at = 9;                      // When the task completed (unix timestamp)
    uint64 execution_time_ms = 10;                // Total execution time in milliseconds
}

message ListTasksRequest {
    string container_id = 1;                      // Container ID to list tasks for (optional)
    TaskStatus status_filter = 2;                 // Optional filter by task status
}

message TaskInfo {
    string task_id = 1;                           // ID of the task
    string container_id = 2;                      // Container ID where task is running
    TaskStatus status = 3;                        // Current status
    repeated string command = 4;                  // Command being executed
    uint64 started_at = 5;                        // When the task started
    uint64 completed_at = 6;                      // When the task completed (0 if not completed)
}

message ListTasksResponse {
    repeated TaskInfo tasks = 1;                  // List of tasks
}

message CancelTaskRequest {
    string task_id = 1;                            // ID of the task to cancel
}

message CancelTaskResponse {
    bool success = 1;                             // Whether the task was successfully canceled
    string error_message = 2;                      // Error message (if any)
}

message ListContainersRequest {
    // Optional filter by container state
    ContainerStatus state_filter = 1;
}

message ContainerInfo {
    string container_id = 1;
    ContainerStatus status = 2;
    string image_path = 3;
    string command = 4;
    uint64 created_at = 5;
}

message ListContainersResponse {
    repeated ContainerInfo containers = 1;
}

message GetSystemMetricsRequest {}

message GetSystemMetricsResponse {
    uint64 total_memory_bytes = 1;
    uint64 used_memory_bytes = 2;
    uint64 total_swap_bytes = 3;
    uint64 used_swap_bytes = 4;
    double cpu_usage_percent = 5;
    uint32 active_containers = 6;
}

message GetNetworkTopologyRequest {}

message NetworkNode {
    string container_id = 1;
    string ip_address = 2;
    repeated string connections = 3; // List of container IDs this node is connected to
}

message GetNetworkTopologyResponse {
    repeated NetworkNode nodes = 1;
}

message GetContainerNetworkInfoRequest {
    string container_id = 1;
}

message GetContainerNetworkInfoResponse {
    string container_id = 1;
    string ip_address = 2;
    string bridge_interface = 3;
    string veth_host = 4;
    string veth_container = 5;
    bool setup_completed = 6;
    string status = 7;
}

// Bundle management messages

message UploadBundleRequest {
    oneof payload {
        BundleMetadata metadata = 1;                // First message: bundle metadata and info
        bytes chunk = 2;                           // Subsequent messages: bundle data chunks
        string checksum = 3;                       // Final message: blake3 checksum for verification
    }
}

message BundleMetadata {
    string name = 1;                               // Bundle name from manifest
    string version = 2;                            // Bundle version
    string description = 3;                        // Bundle description (optional)
    uint64 total_size_bytes = 4;                  // Total bundle size in bytes
    uint32 chunk_size_bytes = 5;                  // Size of data chunks to follow
    string blake3_hash = 6;                        // Expected blake3 hash of complete bundle
    string signature = 7;                         // Ed25519 signature (optional, for AUTH.MD integration)
    string uploader_identity = 8;                 // Identity of uploader (optional, for AUTH.MD)
    map<string, string> metadata_fields = 9;      // Additional metadata fields
}

message UploadBundleResponse {
    bool success = 1;                              // Whether upload was successful
    string bundle_id = 2;                          // Generated bundle ID (blake3 hash)
    string error_message = 3;                      // Error message if upload failed
    BundleStatus status = 4;                       // Final status of the bundle
    uint64 bytes_received = 5;                     // Total bytes received
    double upload_time_seconds = 6;               // Total upload time
    BundleInfo bundle_info = 7;                    // Bundle information after successful upload
}

message GetBundleInfoRequest {
    string bundle_id = 1;                          // Bundle ID to query
}

message GetBundleInfoResponse {
    bool success = 1;                              // Whether bundle was found
    string error_message = 2;                      // Error message if bundle not found
    BundleInfo bundle_info = 3;                    // Bundle information
}

message BundleInfo {
    string bundle_id = 1;                          // Bundle ID (blake3 hash)
    string name = 2;                               // Bundle name
    string version = 3;                            // Bundle version
    string description = 4;                        // Bundle description
    BundleStatus status = 5;                       // Current bundle status
    uint64 size_bytes = 6;                         // Bundle size in bytes
    uint64 uploaded_at = 7;                        // Upload timestamp (unix timestamp)
    string uploader_identity = 8;                  // Identity of uploader
    BundleManifest manifest = 9;                   // Parsed bundle manifest
    BundleValidation validation = 10;              // Validation results
}

message BundleManifest {
    string name = 1;                               // Manifest name
    string version = 2;                            // Manifest version
    repeated ToolInfo tools = 3;                   // Tools defined in bundle
    repeated AgentInfo agents = 4;                 // Agents defined in bundle
    repeated TeamInfo teams = 5;                   // Teams defined in bundle
    repeated PipelineInfo pipelines = 6;           // Pipelines defined in bundle
}

message ToolInfo {
    string name = 1;                               // Tool name
    string description = 2;                        // Tool description
    map<string, string> inputs = 3;               // Tool input schema
    map<string, string> outputs = 4;              // Tool output schema (optional)
}

message AgentInfo {
    string name = 1;                               // Agent name
    string description = 2;                        // Agent description
    repeated string tools = 3;                     // Tools used by this agent
}

message TeamInfo {
    string name = 1;                               // Team name
    string description = 2;                        // Team description
    repeated string members = 3;                   // Agent members of this team
}

message PipelineInfo {
    string name = 1;                               // Pipeline name
    string description = 2;                        // Pipeline description
}

message BundleValidation {
    bool signature_valid = 1;                      // Whether signature is valid
    bool checksum_valid = 2;                       // Whether checksum matches
    bool manifest_valid = 3;                       // Whether manifest is valid
    bool dependencies_satisfied = 4;               // Whether all dependencies are satisfied
    repeated string validation_errors = 5;         // List of validation errors
    repeated string validation_warnings = 6;       // List of validation warnings
}

message ListBundlesRequest {
    BundleStatus status_filter = 1;                // Optional filter by bundle status
    string name_filter = 2;                        // Optional filter by bundle name (partial match)
    uint32 limit = 3;                              // Maximum number of bundles to return (0 = no limit)
    uint32 offset = 4;                             // Offset for pagination
}

message ListBundlesResponse {
    repeated BundleInfo bundles = 1;               // List of bundles
    uint32 total_count = 2;                        // Total number of bundles (for pagination)
    bool has_more = 3;                             // Whether there are more bundles available
}

message DeleteBundleRequest {
    string bundle_id = 1;                          // Bundle ID to delete
    bool force = 2;                                // Force deletion even if deployed
}

message DeleteBundleResponse {
    bool success = 1;                              // Whether deletion was successful
    string error_message = 2;                      // Error message if deletion failed
}

message ValidateBundleRequest {
    bytes bundle_data = 1;                         // Bundle data to validate (for small bundles)
    string bundle_path = 2;                        // Path to bundle file (alternative to bundle_data)
    bool check_signature = 3;                      // Whether to verify signature
    bool check_dependencies = 4;                   // Whether to check dependencies
}

message ValidateBundleResponse {
    bool success = 1;                              // Whether validation passed
    string error_message = 2;                      // Error message if validation failed
    BundleValidation validation = 3;               // Detailed validation results
    BundleManifest manifest = 4;                   // Parsed manifest (if validation succeeded)
} 