syntax = "proto3";

package quilt;

// The main service for managing containers
service QuiltService {
    // Creates a new container with advanced features
    rpc CreateContainer (CreateContainerRequest) returns (CreateContainerResponse);
    // Starts a created container
    rpc StartContainer (StartContainerRequest) returns (StartContainerResponse);
    // Gets the status of a container
    rpc GetContainerStatus (GetContainerStatusRequest) returns (GetContainerStatusResponse);
    // Gets the logs of a container
    rpc GetContainerLogs (GetContainerLogsRequest) returns (GetContainerLogsResponse);
    // Stops a running container
    rpc StopContainer (StopContainerRequest) returns (StopContainerResponse);
    // Removes a container
    rpc RemoveContainer (RemoveContainerRequest) returns (RemoveContainerResponse);
    // Executes a command in a running container
    rpc ExecContainer (ExecContainerRequest) returns (ExecContainerResponse);
    // Lists all active containers
    rpc ListContainers (ListContainersRequest) returns (ListContainersResponse);
    // Gets system-level metrics from the host
    rpc GetSystemMetrics (GetSystemMetricsRequest) returns (GetSystemMetricsResponse);
    // Gets the network topology of all managed containers
    rpc GetNetworkTopology (GetNetworkTopologyRequest) returns (GetNetworkTopologyResponse);
    // Gets detailed network information for a specific container
    rpc GetContainerNetworkInfo (GetContainerNetworkInfoRequest) returns (GetContainerNetworkInfoResponse);
}

// Container status enumeration
enum ContainerStatus {
    UNSPECIFIED = 0; // Default value, indicates no filter
    PENDING = 1;   // Container created but not started
    RUNNING = 2;   // Container is actively running
    EXITED = 3;    // Container finished execution
    FAILED = 4;    // Container failed to start or execute
}

message CreateContainerRequest {
    // Basic container configuration
    string image_path = 1;                          // Path to container image tarball
    repeated string command = 2;                    // Command to execute in container
    map<string, string> environment = 3;           // Environment variables
    string working_directory = 4;                  // Working directory inside container
    
    // Setup commands for dynamic runtime installation
    repeated string setup_commands = 5;            // Setup commands (e.g., "npm: typescript", "pip: requests")
    
    // Resource limits
    int32 memory_limit_mb = 6;                     // Memory limit in megabytes (0 = default)
    float cpu_limit_percent = 7;                   // CPU limit as percentage (0.0 = default)
    
    // Namespace configuration
    bool enable_pid_namespace = 8;                 // Enable PID namespace isolation
    bool enable_mount_namespace = 9;               // Enable mount namespace isolation
    bool enable_uts_namespace = 10;                // Enable UTS namespace isolation (hostname)
    bool enable_ipc_namespace = 11;                // Enable IPC namespace isolation
    bool enable_network_namespace = 12;            // Enable network namespace isolation
    
    // Lifecycle control
    bool auto_start = 13;                          // Whether to automatically start the container (default: false for agent control)
}

message CreateContainerResponse {
    string container_id = 1;                       // Generated container ID
    bool success = 2;                              // Whether creation was successful
    string error_message = 3;                      // Error message if creation failed
}

message StartContainerRequest {
    string container_id = 1;                       // Container ID to start
}

message StartContainerResponse {
    bool success = 1;                              // Whether start was successful
    string error_message = 2;                      // Error message if start failed
}

message GetContainerStatusRequest {
    string container_id = 1;                       // Container ID to query
}

message GetContainerStatusResponse {
    string container_id = 1;                       // Container ID
    ContainerStatus status = 2;                    // Current container status
    int32 exit_code = 3;                          // Exit code (if exited)
    string error_message = 4;                      // Error message (if failed)
    int32 pid = 5;                                // Process ID (if running)
    uint64 created_at = 6;                        // Creation timestamp
    uint64 memory_usage_bytes = 7;                // Current memory usage
    string rootfs_path = 8;                       // Container rootfs path
    string ip_address = 9;                        // Container IP address (ICC networking)
}

message LogEntry {
    uint64 timestamp = 1;                         // Timestamp of log entry
    string message = 2;                           // Log message content
}

message GetContainerLogsRequest {
    string container_id = 1;                      // Container ID to get logs for
}

message GetContainerLogsResponse {
    string container_id = 1;                      // Container ID
    repeated LogEntry logs = 2;                   // All log entries
}

message StopContainerRequest {
    string container_id = 1;                      // Container ID to stop
    int32 timeout_seconds = 2;                    // Timeout before force kill (optional)
}

message StopContainerResponse {
    bool success = 1;                             // Whether stop was successful
    string error_message = 2;                     // Error message if stop failed
}

message RemoveContainerRequest {
    string container_id = 1;                      // Container ID to remove
    bool force = 2;                               // Force removal even if running
}

message RemoveContainerResponse {
    bool success = 1;                             // Whether removal was successful
    string error_message = 2;                     // Error message if removal failed
}

message ExecContainerRequest {
    string container_id = 1;                      // Container ID to execute command in
    repeated string command = 2;                  // Command and arguments to execute
    string working_directory = 3;                 // Working directory (optional)
    map<string, string> environment = 4;          // Additional environment variables
    bool capture_output = 5;                      // Whether to capture and return output
}

message ExecContainerResponse {
    bool success = 1;                             // Whether execution was successful
    int32 exit_code = 2;                         // Exit code of the executed command
    string stdout = 3;                            // Standard output (if capture_output=true)
    string stderr = 4;                            // Standard error (if capture_output=true)
    string error_message = 5;                     // Error message if execution failed
}

message ListContainersRequest {
    // Optional filter by container state
    ContainerStatus state_filter = 1;
}

message ContainerInfo {
    string container_id = 1;
    ContainerStatus status = 2;
    string image_path = 3;
    string command = 4;
    uint64 created_at = 5;
}

message ListContainersResponse {
    repeated ContainerInfo containers = 1;
}

message GetSystemMetricsRequest {}

message GetSystemMetricsResponse {
    uint64 total_memory_bytes = 1;
    uint64 used_memory_bytes = 2;
    uint64 total_swap_bytes = 3;
    uint64 used_swap_bytes = 4;
    double cpu_usage_percent = 5;
    uint32 active_containers = 6;
}

message GetNetworkTopologyRequest {}

message NetworkNode {
    string container_id = 1;
    string ip_address = 2;
    repeated string connections = 3; // List of container IDs this node is connected to
}

message GetNetworkTopologyResponse {
    repeated NetworkNode nodes = 1;
}

message GetContainerNetworkInfoRequest {
    string container_id = 1;
}

message GetContainerNetworkInfoResponse {
    string container_id = 1;
    string ip_address = 2;
    string bridge_interface = 3;
    string veth_host = 4;
    string veth_container = 5;
    bool setup_completed = 6;
    string status = 7;
} 